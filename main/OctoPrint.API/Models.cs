// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do one of these:
//
//    using OctoPrint.API.Models;
//
//    var usersModel = UsersModel.FromJson(jsonString);
//    var accessGroupsModel = AccessGroupsModel.FromJson(jsonString);
//    var permissionsModel = PermissionsModel.FromJson(jsonString);
//    var timelapseModel = TimelapseModel.FromJson(jsonString);
//    var systemCommandsModel = SystemCommandsModel.FromJson(jsonString);
//    var slicingModel = SlicingModel.FromJson(jsonString);
//    var settingsTemplatesModel = SettingsTemplatesModel.FromJson(jsonString);
//    var settingsModel = SettingsModel.FromJson(jsonString);
//    var printerProfilesModel = PrinterProfilesModel.FromJson(jsonString);
//    var printerCustomCommandModel = PrinterCustomCommandModel.FromJson(jsonString);
//    var printerSdModel = PrinterSdModel.FromJson(jsonString);
//    var printerChamberModel = PrinterChamberModel.FromJson(jsonString);
//    var printerBedModel = PrinterBedModel.FromJson(jsonString);
//    var printerToolModel = PrinterToolModel.FromJson(jsonString);
//    var printerModel = PrinterModel.FromJson(jsonString);
//    var languagesModel = LanguagesModel.FromJson(jsonString);
//    var jobModel = JobModel.FromJson(jsonString);
//    var filesModel = FilesModel.FromJson(jsonString);
//    var connectionModel = ConnectionModel.FromJson(jsonString);
//    var versionModel = VersionModel.FromJson(jsonString);
//    var currentUserModel = CurrentUserModel.FromJson(jsonString);

namespace OctoPrint.API.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;

    public partial class UsersModel
    {
        [J("users", NullValueHandling = N.Ignore)] public List<UserModel> Users { get; set; }
    }

    public partial class UserModel
    {
        [J("active", NullValueHandling = N.Ignore)] public bool? Active { get; set; }
        [J("admin", NullValueHandling = N.Ignore)] public bool? Admin { get; set; }
        [J("apikey")] public object Apikey { get; set; }
        [J("groups", NullValueHandling = N.Ignore)] public List<KeyElement> Groups { get; set; }
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("needs", NullValueHandling = N.Ignore)] public UserNeeds Needs { get; set; }
        [J("permissions", NullValueHandling = N.Ignore)] public List<object> Permissions { get; set; }
        [J("roles", NullValueHandling = N.Ignore)] public List<string> Roles { get; set; }
        [J("settings", NullValueHandling = N.Ignore)] public UserSettingsModel UserSettingsModel { get; set; }
        [J("user", NullValueHandling = N.Ignore)] public bool? UserUser { get; set; }
    }

    public partial class UserNeeds
    {
        [J("group", NullValueHandling = N.Ignore)] public List<KeyElement> Group { get; set; }
        [J("role", NullValueHandling = N.Ignore)] public List<string> Role { get; set; }
    }

    public partial class UserSettingsModel
    {
    }

    public partial class AccessGroupsModel
    {
        [J("groups", NullValueHandling = N.Ignore)] public List<AccessGroupModel> Groups { get; set; }
    }

    public partial class AccessGroupModel
    {
        [J("changeable", NullValueHandling = N.Ignore)] public bool? Changeable { get; set; }
        [J("default", NullValueHandling = N.Ignore)] public bool? Default { get; set; }
        [J("description", NullValueHandling = N.Ignore)] public string Description { get; set; }
        [J("key", NullValueHandling = N.Ignore)] public KeyElement? Key { get; set; }
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("needs", NullValueHandling = N.Ignore)] public UserNeeds Needs { get; set; }
        [J("permissions", NullValueHandling = N.Ignore)] public List<string> Permissions { get; set; }
        [J("removable", NullValueHandling = N.Ignore)] public bool? Removable { get; set; }
        [J("subgroups", NullValueHandling = N.Ignore)] public List<object> Subgroups { get; set; }
        [J("toggleable", NullValueHandling = N.Ignore)] public bool? Toggleable { get; set; }
    }

    public partial class PermissionsModel
    {
        [J("permissions", NullValueHandling = N.Ignore)] public List<Permission> Permissions { get; set; }
    }

    public partial class Permission
    {
        [J("dangerous", NullValueHandling = N.Ignore)] public bool? Dangerous { get; set; }
        [J("default_groups", NullValueHandling = N.Ignore)] public List<KeyElement> DefaultGroups { get; set; }
        [J("description", NullValueHandling = N.Ignore)] public string Description { get; set; }
        [J("key", NullValueHandling = N.Ignore)] public string Key { get; set; }
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("needs", NullValueHandling = N.Ignore)] public PermissionNeeds Needs { get; set; }
        [J("plugin", NullValueHandling = N.Ignore)] public string Plugin { get; set; }
    }

    public partial class PermissionNeeds
    {
        [J("role", NullValueHandling = N.Ignore)] public List<string> Role { get; set; }
    }

    public partial class TimelapseModel
    {
        [J("config", NullValueHandling = N.Ignore)] public Config Config { get; set; }
        [J("enabled", NullValueHandling = N.Ignore)] public bool? Enabled { get; set; }
        [J("unrendered", NullValueHandling = N.Ignore)] public List<Unrendered> Unrendered { get; set; }
        [J("files", NullValueHandling = N.Ignore)] public List<TimelapseModelFile> Files { get; set; }
    }

    public partial class Config
    {
        [J("type", NullValueHandling = N.Ignore)] public string Type { get; set; }
    }

    public partial class TimelapseModelFile
    {
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("size", NullValueHandling = N.Ignore)] public string Size { get; set; }
        [J("bytes", NullValueHandling = N.Ignore)] public long? Bytes { get; set; }
        [J("date", NullValueHandling = N.Ignore)] public string Date { get; set; }
        [J("url", NullValueHandling = N.Ignore)] public Uri Url { get; set; }
    }

    public partial class Unrendered
    {
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("size", NullValueHandling = N.Ignore)] public string Size { get; set; }
        [J("bytes", NullValueHandling = N.Ignore)] public long? Bytes { get; set; }
        [J("date", NullValueHandling = N.Ignore)] public string Date { get; set; }
        [J("recording", NullValueHandling = N.Ignore)] public bool? Recording { get; set; }
        [J("rendering", NullValueHandling = N.Ignore)] public bool? Rendering { get; set; }
        [J("processing", NullValueHandling = N.Ignore)] public bool? Processing { get; set; }
    }

    public partial class SystemCommandsModel
    {
        [J("core", NullValueHandling = N.Ignore)] public List<CoreElement> Core { get; set; }
        [J("custom", NullValueHandling = N.Ignore)] public List<object> Custom { get; set; }
    }

    public partial class CoreElement
    {
        [J("action", NullValueHandling = N.Ignore)] public string Action { get; set; }
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("confirm", NullValueHandling = N.Ignore)] public string Confirm { get; set; }
        [J("source", NullValueHandling = N.Ignore)] public string Source { get; set; }
        [J("resource", NullValueHandling = N.Ignore)] public Uri Resource { get; set; }
    }

    public partial class SlicingModel
    {
        [J("curalegacy", NullValueHandling = N.Ignore)] public Curalegacy Curalegacy { get; set; }
    }

    public partial class CuralegacyProfiles
    {
        [J("high_quality", NullValueHandling = N.Ignore)] public Curalegacy HighQuality { get; set; }
        [J("medium_quality", NullValueHandling = N.Ignore)] public Curalegacy MediumQuality { get; set; }
    }

    public partial class Curalegacy
    {
        [J("key", NullValueHandling = N.Ignore)] public string Key { get; set; }
        [J("displayName", NullValueHandling = N.Ignore)] public string DisplayName { get; set; }
        [J("default", NullValueHandling = N.Ignore)] public bool? Default { get; set; }
        [J("profiles", NullValueHandling = N.Ignore)] public CuralegacyProfiles Profiles { get; set; }
        [J("resource", NullValueHandling = N.Ignore)] public Uri Resource { get; set; }
    }

    public partial class SettingsTemplatesModel
    {
        [J("order", NullValueHandling = N.Ignore)] public Order Order { get; set; }
    }

    public partial class Order
    {
        [J("about", NullValueHandling = N.Ignore)] public List<About> About { get; set; }
        [J("generic", NullValueHandling = N.Ignore)] public List<About> Generic { get; set; }
        [J("navbar", NullValueHandling = N.Ignore)] public List<About> Navbar { get; set; }
        [J("plugin_pluginmanager_about_thirdparty", NullValueHandling = N.Ignore)] public List<object> PluginPluginmanagerAboutThirdparty { get; set; }
        [J("settings", NullValueHandling = N.Ignore)] public List<About> Settings { get; set; }
        [J("sidebar", NullValueHandling = N.Ignore)] public List<About> Sidebar { get; set; }
        [J("tab", NullValueHandling = N.Ignore)] public List<About> Tab { get; set; }
        [J("usersettings", NullValueHandling = N.Ignore)] public List<About> Usersettings { get; set; }
        [J("wizard", NullValueHandling = N.Ignore)] public List<object> Wizard { get; set; }
    }

    public partial class About
    {
        [J("id", NullValueHandling = N.Ignore)] public string Id { get; set; }
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("plugin_id", NullValueHandling = N.Ignore)] public string PluginId { get; set; }
        [J("plugin_name", NullValueHandling = N.Ignore)] public string PluginName { get; set; }
    }

    public partial class SettingsModel
    {
        [J("api", NullValueHandling = N.Ignore)] public Api Api { get; set; }
        [J("appearance", NullValueHandling = N.Ignore)] public Appearance Appearance { get; set; }
        [J("feature", NullValueHandling = N.Ignore)] public Feature Feature { get; set; }
        [J("folder", NullValueHandling = N.Ignore)] public Folder Folder { get; set; }
        [J("gcodeAnalysis", NullValueHandling = N.Ignore)] public SettingsModelGcodeAnalysis GcodeAnalysis { get; set; }
        [J("plugins", NullValueHandling = N.Ignore)] public Plugins Plugins { get; set; }
        [J("printer", NullValueHandling = N.Ignore)] public Printer Printer { get; set; }
        [J("scripts", NullValueHandling = N.Ignore)] public Scripts Scripts { get; set; }
        [J("serial", NullValueHandling = N.Ignore)] public Serial Serial { get; set; }
        [J("server", NullValueHandling = N.Ignore)] public Server Server { get; set; }
        [J("system", NullValueHandling = N.Ignore)] public SystemClass System { get; set; }
        [J("temperature", NullValueHandling = N.Ignore)] public SettingsModelTemperature Temperature { get; set; }
        [J("terminalFilters", NullValueHandling = N.Ignore)] public List<TerminalFilter> TerminalFilters { get; set; }
        [J("webcam", NullValueHandling = N.Ignore)] public Webcam Webcam { get; set; }
    }

    public partial class Api
    {
        [J("allowCrossOrigin", NullValueHandling = N.Ignore)] public bool? AllowCrossOrigin { get; set; }
        [J("key", NullValueHandling = N.Ignore)] public string Key { get; set; }
    }

    public partial class Appearance
    {
        [J("closeModalsWithClick", NullValueHandling = N.Ignore)] public bool? CloseModalsWithClick { get; set; }
        [J("color", NullValueHandling = N.Ignore)] public string Color { get; set; }
        [J("colorIcon", NullValueHandling = N.Ignore)] public bool? ColorIcon { get; set; }
        [J("colorTransparent", NullValueHandling = N.Ignore)] public bool? ColorTransparent { get; set; }
        [J("defaultLanguage", NullValueHandling = N.Ignore)] public string DefaultLanguage { get; set; }
        [J("fuzzyTimes", NullValueHandling = N.Ignore)] public bool? FuzzyTimes { get; set; }
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("showFahrenheitAlso", NullValueHandling = N.Ignore)] public bool? ShowFahrenheitAlso { get; set; }
    }

    public partial class Feature
    {
        [J("autoUppercaseBlacklist", NullValueHandling = N.Ignore)] public List<string> AutoUppercaseBlacklist { get; set; }
        [J("g90InfluencesExtruder", NullValueHandling = N.Ignore)] public bool? G90InfluencesExtruder { get; set; }
        [J("gcodeViewer", NullValueHandling = N.Ignore)] public bool? GcodeViewer { get; set; }
        [J("keyboardControl", NullValueHandling = N.Ignore)] public bool? KeyboardControl { get; set; }
        [J("mobileSizeThreshold", NullValueHandling = N.Ignore)] public long? MobileSizeThreshold { get; set; }
        [J("modelSizeDetection", NullValueHandling = N.Ignore)] public bool? ModelSizeDetection { get; set; }
        [J("pollWatched", NullValueHandling = N.Ignore)] public bool? PollWatched { get; set; }
        [J("printCancelConfirmation", NullValueHandling = N.Ignore)] public bool? PrintCancelConfirmation { get; set; }
        [J("printStartConfirmation", NullValueHandling = N.Ignore)] public bool? PrintStartConfirmation { get; set; }
        [J("sdSupport", NullValueHandling = N.Ignore)] public bool? SdSupport { get; set; }
        [J("sizeThreshold", NullValueHandling = N.Ignore)] public long? SizeThreshold { get; set; }
        [J("temperatureGraph", NullValueHandling = N.Ignore)] public bool? TemperatureGraph { get; set; }
    }

    public partial class Folder
    {
        [J("logs", NullValueHandling = N.Ignore)] public string Logs { get; set; }
        [J("timelapse", NullValueHandling = N.Ignore)] public string Timelapse { get; set; }
        [J("timelapseTmp", NullValueHandling = N.Ignore)] public string TimelapseTmp { get; set; }
        [J("uploads", NullValueHandling = N.Ignore)] public string Uploads { get; set; }
        [J("watched", NullValueHandling = N.Ignore)] public string Watched { get; set; }
    }

    public partial class SettingsModelGcodeAnalysis
    {
        [J("runAt", NullValueHandling = N.Ignore)] public string RunAt { get; set; }
    }

    public partial class Plugins
    {
        [J("HeaterTimeout", NullValueHandling = N.Ignore)] public HeaterTimeout HeaterTimeout { get; set; }
        [J("action_command_prompt", NullValueHandling = N.Ignore)] public ActionCommandPrompt ActionCommandPrompt { get; set; }
        [J("announcements", NullValueHandling = N.Ignore)] public Announcements Announcements { get; set; }
        [J("cancelobject", NullValueHandling = N.Ignore)] public Cancelobject Cancelobject { get; set; }
        [J("discovery", NullValueHandling = N.Ignore)] public Discovery Discovery { get; set; }
        [J("errortracking", NullValueHandling = N.Ignore)] public Errortracking Errortracking { get; set; }
        [J("filamentmanager", NullValueHandling = N.Ignore)] public Filamentmanager Filamentmanager { get; set; }
        [J("floatingnavbar", NullValueHandling = N.Ignore)] public Floatingnavbar Floatingnavbar { get; set; }
        [J("pi_support", NullValueHandling = N.Ignore)] public PiSupport PiSupport { get; set; }
        [J("pluginmanager", NullValueHandling = N.Ignore)] public Pluginmanager Pluginmanager { get; set; }
        [J("simpleemergencystop", NullValueHandling = N.Ignore)] public Simpleemergencystop Simpleemergencystop { get; set; }
        [J("softwareupdate", NullValueHandling = N.Ignore)] public Softwareupdate Softwareupdate { get; set; }
        [J("taborder", NullValueHandling = N.Ignore)] public Taborder Taborder { get; set; }
        [J("themeify", NullValueHandling = N.Ignore)] public Themeify Themeify { get; set; }
        [J("tracking", NullValueHandling = N.Ignore)] public Tracking Tracking { get; set; }
    }

    public partial class ActionCommandPrompt
    {
        [J("command", NullValueHandling = N.Ignore)] public string Command { get; set; }
        [J("enable", NullValueHandling = N.Ignore)] public string Enable { get; set; }
        [J("enable_emergency_sending", NullValueHandling = N.Ignore)] public bool? EnableEmergencySending { get; set; }
        [J("enable_signal_support", NullValueHandling = N.Ignore)] public bool? EnableSignalSupport { get; set; }
    }

    public partial class Announcements
    {
        [J("channel_order", NullValueHandling = N.Ignore)] public List<string> ChannelOrder { get; set; }
        [J("channels", NullValueHandling = N.Ignore)] public Channels Channels { get; set; }
        [J("display_limit", NullValueHandling = N.Ignore)] public long? DisplayLimit { get; set; }
        [J("enabled_channels", NullValueHandling = N.Ignore)] public List<string> EnabledChannels { get; set; }
        [J("forced_channels", NullValueHandling = N.Ignore)] public List<string> ForcedChannels { get; set; }
        [J("summary_limit", NullValueHandling = N.Ignore)] public long? SummaryLimit { get; set; }
        [J("ttl", NullValueHandling = N.Ignore)] public long? Ttl { get; set; }
    }

    public partial class Channels
    {
        [J("_blog", NullValueHandling = N.Ignore)] public Blog Blog { get; set; }
        [J("_important", NullValueHandling = N.Ignore)] public Blog Important { get; set; }
        [J("_octopi", NullValueHandling = N.Ignore)] public Blog Octopi { get; set; }
        [J("_plugins", NullValueHandling = N.Ignore)] public Blog Plugins { get; set; }
        [J("_releases", NullValueHandling = N.Ignore)] public Blog Releases { get; set; }
    }

    public partial class Blog
    {
        [J("description", NullValueHandling = N.Ignore)] public string Description { get; set; }
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("priority", NullValueHandling = N.Ignore)] public long? Priority { get; set; }
        [J("read_until", NullValueHandling = N.Ignore)] public long? ReadUntil { get; set; }
        [J("type", NullValueHandling = N.Ignore)] public string Type { get; set; }
        [J("url", NullValueHandling = N.Ignore)] public Uri Url { get; set; }
    }

    public partial class Cancelobject
    {
        [J("aftergocde")] public object Aftergocde { get; set; }
        [J("allowed", NullValueHandling = N.Ignore)] public string Allowed { get; set; }
        [J("beforegcode")] public object Beforegcode { get; set; }
        [J("ignored", NullValueHandling = N.Ignore)] public string Ignored { get; set; }
        [J("object_regex", NullValueHandling = N.Ignore)] public List<ObjectRegex> ObjectRegex { get; set; }
        [J("reptag", NullValueHandling = N.Ignore)] public string Reptag { get; set; }
        [J("shownav", NullValueHandling = N.Ignore)] public bool? Shownav { get; set; }
    }

    public partial class ObjectRegex
    {
        [J("objreg", NullValueHandling = N.Ignore)] public string Objreg { get; set; }
    }

    public partial class Discovery
    {
        [J("httpPassword")] public object HttpPassword { get; set; }
        [J("httpUsername")] public object HttpUsername { get; set; }
        [J("model", NullValueHandling = N.Ignore)] public Model Model { get; set; }
        [J("pathPrefix")] public object PathPrefix { get; set; }
        [J("publicHost")] public object PublicHost { get; set; }
        [J("publicPort", NullValueHandling = N.Ignore)] public long? PublicPort { get; set; }
        [J("upnpUuid", NullValueHandling = N.Ignore)] public Guid? UpnpUuid { get; set; }
        [J("zeroConf", NullValueHandling = N.Ignore)] public List<object> ZeroConf { get; set; }
    }

    public partial class Model
    {
        [J("description")] public object Description { get; set; }
        [J("name")] public object Name { get; set; }
        [J("number")] public object Number { get; set; }
        [J("serial")] public object Serial { get; set; }
        [J("url")] public object Url { get; set; }
        [J("vendor")] public object Vendor { get; set; }
        [J("vendorUrl")] public object VendorUrl { get; set; }
    }

    public partial class Errortracking
    {
        [J("enabled", NullValueHandling = N.Ignore)] public bool? Enabled { get; set; }
        [J("enabled_unreleased", NullValueHandling = N.Ignore)] public bool? EnabledUnreleased { get; set; }
        [J("unique_id", NullValueHandling = N.Ignore)] public Guid? UniqueId { get; set; }
        [J("url_coreui", NullValueHandling = N.Ignore)] public Uri UrlCoreui { get; set; }
        [J("url_server", NullValueHandling = N.Ignore)] public Uri UrlServer { get; set; }
    }

    public partial class Filamentmanager
    {
        [J("autoPause", NullValueHandling = N.Ignore)] public bool? AutoPause { get; set; }
        [J("confirmSpoolSelection", NullValueHandling = N.Ignore)] public bool? ConfirmSpoolSelection { get; set; }
        [J("currencySymbol", NullValueHandling = N.Ignore)] public string CurrencySymbol { get; set; }
        [J("database", NullValueHandling = N.Ignore)] public Database Database { get; set; }
        [J("enableOdometer", NullValueHandling = N.Ignore)] public bool? EnableOdometer { get; set; }
        [J("enableWarning", NullValueHandling = N.Ignore)] public bool? EnableWarning { get; set; }
        [J("pauseThreshold", NullValueHandling = N.Ignore)] public long? PauseThreshold { get; set; }
    }

    public partial class Database
    {
        [J("clientID", NullValueHandling = N.Ignore)] public Guid? ClientId { get; set; }
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("password", NullValueHandling = N.Ignore)] public string Password { get; set; }
        [J("uri", NullValueHandling = N.Ignore)] public string Uri { get; set; }
        [J("useExternal", NullValueHandling = N.Ignore)] public bool? UseExternal { get; set; }
        [J("user", NullValueHandling = N.Ignore)] public string User { get; set; }
    }

    public partial class Floatingnavbar
    {
        [J("buffer_size", NullValueHandling = N.Ignore)] public long? BufferSize { get; set; }
    }

    public partial class HeaterTimeout
    {
        [J("enabled", NullValueHandling = N.Ignore)] public bool? Enabled { get; set; }
        [J("interval", NullValueHandling = N.Ignore)] public long? Interval { get; set; }
        [J("timeout", NullValueHandling = N.Ignore)] public long? Timeout { get; set; }
    }

    public partial class PiSupport
    {
        [J("vcgencmd_throttle_check_command", NullValueHandling = N.Ignore)] public string VcgencmdThrottleCheckCommand { get; set; }
        [J("vcgencmd_throttle_check_enabled", NullValueHandling = N.Ignore)] public bool? VcgencmdThrottleCheckEnabled { get; set; }
    }

    public partial class Pluginmanager
    {
        [J("confirm_disable", NullValueHandling = N.Ignore)] public bool? ConfirmDisable { get; set; }
        [J("dependency_links", NullValueHandling = N.Ignore)] public bool? DependencyLinks { get; set; }
        [J("hidden", NullValueHandling = N.Ignore)] public List<object> Hidden { get; set; }
        [J("ignore_throttled", NullValueHandling = N.Ignore)] public bool? IgnoreThrottled { get; set; }
        [J("notices", NullValueHandling = N.Ignore)] public Uri Notices { get; set; }
        [J("notices_ttl", NullValueHandling = N.Ignore)] public long? NoticesTtl { get; set; }
        [J("pip_args")] public object PipArgs { get; set; }
        [J("pip_force_user", NullValueHandling = N.Ignore)] public bool? PipForceUser { get; set; }
        [J("repository", NullValueHandling = N.Ignore)] public Uri Repository { get; set; }
        [J("repository_ttl", NullValueHandling = N.Ignore)] public long? RepositoryTtl { get; set; }
    }

    public partial class Simpleemergencystop
    {
        [J("big_button", NullValueHandling = N.Ignore)] public bool? BigButton { get; set; }
        [J("confirmationDialog", NullValueHandling = N.Ignore)] public bool? ConfirmationDialog { get; set; }
        [J("emergencyGCODE", NullValueHandling = N.Ignore)] public string EmergencyGcode { get; set; }
    }

    public partial class Softwareupdate
    {
        [J("cache_ttl", NullValueHandling = N.Ignore)] public long? CacheTtl { get; set; }
        [J("ignore_throttled", NullValueHandling = N.Ignore)] public bool? IgnoreThrottled { get; set; }
        [J("notify_users", NullValueHandling = N.Ignore)] public bool? NotifyUsers { get; set; }
        [J("octoprint_branch_mappings", NullValueHandling = N.Ignore)] public List<OctoprintBranchMapping> OctoprintBranchMappings { get; set; }
        [J("octoprint_checkout_folder")] public object OctoprintCheckoutFolder { get; set; }
        [J("octoprint_method", NullValueHandling = N.Ignore)] public string OctoprintMethod { get; set; }
        [J("octoprint_pip_target", NullValueHandling = N.Ignore)] public string OctoprintPipTarget { get; set; }
        [J("octoprint_release_channel", NullValueHandling = N.Ignore)] public string OctoprintReleaseChannel { get; set; }
        [J("octoprint_tracked_branch")] public object OctoprintTrackedBranch { get; set; }
        [J("octoprint_type", NullValueHandling = N.Ignore)] public string OctoprintType { get; set; }
        [J("pip_command")] public object PipCommand { get; set; }
        [J("pip_enable_check", NullValueHandling = N.Ignore)] public bool? PipEnableCheck { get; set; }
    }

    public partial class OctoprintBranchMapping
    {
        [J("branch", NullValueHandling = N.Ignore)] public string Branch { get; set; }
        [J("commitish", NullValueHandling = N.Ignore)] public List<string> Commitish { get; set; }
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
    }

    public partial class Taborder
    {
        [J("hidden_tabs", NullValueHandling = N.Ignore)] public List<object> HiddenTabs { get; set; }
        [J("tabs", NullValueHandling = N.Ignore)] public List<Tab> Tabs { get; set; }
    }

    public partial class Tab
    {
        [J("icon", NullValueHandling = N.Ignore)] public string Icon { get; set; }
        [J("icon_color", NullValueHandling = N.Ignore)] public string IconColor { get; set; }
        [J("icon_tooltip", NullValueHandling = N.Ignore)] public string IconTooltip { get; set; }
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("showtext", NullValueHandling = N.Ignore)] public bool? Showtext { get; set; }
    }

    public partial class Themeify
    {
        [J("color", NullValueHandling = N.Ignore)] public List<Color> Color { get; set; }
        [J("customRules", NullValueHandling = N.Ignore)] public List<Color> CustomRules { get; set; }
        [J("enableCustomization", NullValueHandling = N.Ignore)] public bool? EnableCustomization { get; set; }
        [J("enabled", NullValueHandling = N.Ignore)] public bool? Enabled { get; set; }
        [J("tabs", NullValueHandling = N.Ignore)] public Tabs Tabs { get; set; }
        [J("theme", NullValueHandling = N.Ignore)] public string Theme { get; set; }
    }

    public partial class Color
    {
        [J("deletable", NullValueHandling = N.Ignore)] public bool? Deletable { get; set; }
        [J("enabled", NullValueHandling = N.Ignore)] public bool? Enabled { get; set; }
        [J("rule", NullValueHandling = N.Ignore)] public string Rule { get; set; }
        [J("selector", NullValueHandling = N.Ignore)] public string Selector { get; set; }
        [J("value", NullValueHandling = N.Ignore)] public string Value { get; set; }
    }

    public partial class Tabs
    {
        [J("enableIcons", NullValueHandling = N.Ignore)] public bool? EnableIcons { get; set; }
        [J("icons", NullValueHandling = N.Ignore)] public List<Icon> Icons { get; set; }
    }

    public partial class Icon
    {
        [J("domId", NullValueHandling = N.Ignore)] public string DomId { get; set; }
        [J("enabled", NullValueHandling = N.Ignore)] public bool? Enabled { get; set; }
        [J("faIcon", NullValueHandling = N.Ignore)] public string FaIcon { get; set; }
    }

    public partial class Tracking
    {
        [J("enabled", NullValueHandling = N.Ignore)] public bool? Enabled { get; set; }
        [J("events", NullValueHandling = N.Ignore)] public Events Events { get; set; }
        [J("ping")] public object Ping { get; set; }
        [J("pong", NullValueHandling = N.Ignore)] public long? Pong { get; set; }
        [J("server")] public object Server { get; set; }
        [J("unique_id", NullValueHandling = N.Ignore)] public Guid? UniqueId { get; set; }
    }

    public partial class Events
    {
        [J("commerror", NullValueHandling = N.Ignore)] public bool? Commerror { get; set; }
        [J("plugin", NullValueHandling = N.Ignore)] public bool? Plugin { get; set; }
        [J("pong", NullValueHandling = N.Ignore)] public bool? Pong { get; set; }
        [J("printer", NullValueHandling = N.Ignore)] public bool? Printer { get; set; }
        [J("printer_safety_check", NullValueHandling = N.Ignore)] public bool? PrinterSafetyCheck { get; set; }
        [J("printjob", NullValueHandling = N.Ignore)] public bool? Printjob { get; set; }
        [J("slicing", NullValueHandling = N.Ignore)] public bool? Slicing { get; set; }
        [J("startup", NullValueHandling = N.Ignore)] public bool? Startup { get; set; }
        [J("throttled", NullValueHandling = N.Ignore)] public bool? Throttled { get; set; }
        [J("update", NullValueHandling = N.Ignore)] public bool? Update { get; set; }
    }

    public partial class Printer
    {
        [J("defaultExtrusionLength", NullValueHandling = N.Ignore)] public long? DefaultExtrusionLength { get; set; }
    }

    public partial class Scripts
    {
        [J("gcode", NullValueHandling = N.Ignore)] public Gcode Gcode { get; set; }
    }

    public partial class Gcode
    {
        [J("afterPrintCancelled", NullValueHandling = N.Ignore)] public string AfterPrintCancelled { get; set; }
        [J("snippets/disable_bed", NullValueHandling = N.Ignore)] public string SnippetsDisableBed { get; set; }
        [J("snippets/disable_hotends", NullValueHandling = N.Ignore)] public string SnippetsDisableHotends { get; set; }
    }

    public partial class Serial
    {
        [J("abortHeatupOnCancel", NullValueHandling = N.Ignore)] public bool? AbortHeatupOnCancel { get; set; }
        [J("ackMax", NullValueHandling = N.Ignore)] public long? AckMax { get; set; }
        [J("additionalBaudrates", NullValueHandling = N.Ignore)] public List<object> AdditionalBaudrates { get; set; }
        [J("additionalPorts", NullValueHandling = N.Ignore)] public List<object> AdditionalPorts { get; set; }
        [J("alwaysSendChecksum", NullValueHandling = N.Ignore)] public bool? AlwaysSendChecksum { get; set; }
        [J("autoconnect", NullValueHandling = N.Ignore)] public bool? Autoconnect { get; set; }
        [J("baudrate")] public object Baudrate { get; set; }
        [J("baudrateOptions", NullValueHandling = N.Ignore)] public List<long> BaudrateOptions { get; set; }
        [J("blockWhileDwelling", NullValueHandling = N.Ignore)] public bool? BlockWhileDwelling { get; set; }
        [J("blockedCommands", NullValueHandling = N.Ignore)] public List<string> BlockedCommands { get; set; }
        [J("capAutoreportSdStatus", NullValueHandling = N.Ignore)] public bool? CapAutoreportSdStatus { get; set; }
        [J("capAutoreportTemp", NullValueHandling = N.Ignore)] public bool? CapAutoreportTemp { get; set; }
        [J("capBusyProtocol", NullValueHandling = N.Ignore)] public bool? CapBusyProtocol { get; set; }
        [J("capEmergencyParser", NullValueHandling = N.Ignore)] public bool? CapEmergencyParser { get; set; }
        [J("checksumRequiringCommands", NullValueHandling = N.Ignore)] public List<string> ChecksumRequiringCommands { get; set; }
        [J("disconnectOnErrors", NullValueHandling = N.Ignore)] public bool? DisconnectOnErrors { get; set; }
        [J("emergencyCommands", NullValueHandling = N.Ignore)] public List<string> EmergencyCommands { get; set; }
        [J("exclusive", NullValueHandling = N.Ignore)] public bool? Exclusive { get; set; }
        [J("externalHeatupDetection", NullValueHandling = N.Ignore)] public bool? ExternalHeatupDetection { get; set; }
        [J("firmwareDetection", NullValueHandling = N.Ignore)] public bool? FirmwareDetection { get; set; }
        [J("helloCommand", NullValueHandling = N.Ignore)] public string HelloCommand { get; set; }
        [J("ignoreErrorsFromFirmware", NullValueHandling = N.Ignore)] public bool? IgnoreErrorsFromFirmware { get; set; }
        [J("ignoreIdenticalResends", NullValueHandling = N.Ignore)] public bool? IgnoreIdenticalResends { get; set; }
        [J("log", NullValueHandling = N.Ignore)] public bool? Log { get; set; }
        [J("logPositionOnCancel", NullValueHandling = N.Ignore)] public bool? LogPositionOnCancel { get; set; }
        [J("logPositionOnPause", NullValueHandling = N.Ignore)] public bool? LogPositionOnPause { get; set; }
        [J("longRunningCommands", NullValueHandling = N.Ignore)] public List<string> LongRunningCommands { get; set; }
        [J("maxTimeoutsIdle", NullValueHandling = N.Ignore)] public long? MaxTimeoutsIdle { get; set; }
        [J("maxTimeoutsLong", NullValueHandling = N.Ignore)] public long? MaxTimeoutsLong { get; set; }
        [J("maxTimeoutsPrinting", NullValueHandling = N.Ignore)] public long? MaxTimeoutsPrinting { get; set; }
        [J("neverSendChecksum", NullValueHandling = N.Ignore)] public bool? NeverSendChecksum { get; set; }
        [J("pausingCommands", NullValueHandling = N.Ignore)] public List<string> PausingCommands { get; set; }
        [J("port", NullValueHandling = N.Ignore)] public string Port { get; set; }
        [J("portOptions", NullValueHandling = N.Ignore)] public List<object> PortOptions { get; set; }
        [J("repetierTargetTemp", NullValueHandling = N.Ignore)] public bool? RepetierTargetTemp { get; set; }
        [J("sdAlwaysAvailable", NullValueHandling = N.Ignore)] public bool? SdAlwaysAvailable { get; set; }
        [J("sdRelativePath", NullValueHandling = N.Ignore)] public bool? SdRelativePath { get; set; }
        [J("sendM112OnError", NullValueHandling = N.Ignore)] public bool? SendM112OnError { get; set; }
        [J("supportResendsWithoutOk", NullValueHandling = N.Ignore)] public string SupportResendsWithoutOk { get; set; }
        [J("swallowOkAfterResend", NullValueHandling = N.Ignore)] public bool? SwallowOkAfterResend { get; set; }
        [J("timeoutBaudrateDetectionPause", NullValueHandling = N.Ignore)] public long? TimeoutBaudrateDetectionPause { get; set; }
        [J("timeoutCommunication", NullValueHandling = N.Ignore)] public long? TimeoutCommunication { get; set; }
        [J("timeoutCommunicationBusy", NullValueHandling = N.Ignore)] public long? TimeoutCommunicationBusy { get; set; }
        [J("timeoutConnection", NullValueHandling = N.Ignore)] public long? TimeoutConnection { get; set; }
        [J("timeoutDetection", NullValueHandling = N.Ignore)] public long? TimeoutDetection { get; set; }
        [J("timeoutPositionLogWait", NullValueHandling = N.Ignore)] public long? TimeoutPositionLogWait { get; set; }
        [J("timeoutSdStatus", NullValueHandling = N.Ignore)] public long? TimeoutSdStatus { get; set; }
        [J("timeoutSdStatusAutoreport", NullValueHandling = N.Ignore)] public long? TimeoutSdStatusAutoreport { get; set; }
        [J("timeoutTemperature", NullValueHandling = N.Ignore)] public long? TimeoutTemperature { get; set; }
        [J("timeoutTemperatureAutoreport", NullValueHandling = N.Ignore)] public long? TimeoutTemperatureAutoreport { get; set; }
        [J("timeoutTemperatureTargetSet", NullValueHandling = N.Ignore)] public long? TimeoutTemperatureTargetSet { get; set; }
        [J("triggerOkForM29", NullValueHandling = N.Ignore)] public bool? TriggerOkForM29 { get; set; }
        [J("useParityWorkaround", NullValueHandling = N.Ignore)] public string UseParityWorkaround { get; set; }
        [J("waitForStart", NullValueHandling = N.Ignore)] public bool? WaitForStart { get; set; }
    }

    public partial class Server
    {
        [J("allowFraming", NullValueHandling = N.Ignore)] public bool? AllowFraming { get; set; }
        [J("commands", NullValueHandling = N.Ignore)] public Commands Commands { get; set; }
        [J("diskspace", NullValueHandling = N.Ignore)] public Diskspace Diskspace { get; set; }
        [J("onlineCheck", NullValueHandling = N.Ignore)] public OnlineCheck OnlineCheck { get; set; }
        [J("pluginBlacklist", NullValueHandling = N.Ignore)] public PluginBlacklist PluginBlacklist { get; set; }
    }

    public partial class Commands
    {
        [J("serverRestartCommand", NullValueHandling = N.Ignore)] public string ServerRestartCommand { get; set; }
        [J("systemRestartCommand", NullValueHandling = N.Ignore)] public string SystemRestartCommand { get; set; }
        [J("systemShutdownCommand", NullValueHandling = N.Ignore)] public string SystemShutdownCommand { get; set; }
    }

    public partial class Diskspace
    {
        [J("critical", NullValueHandling = N.Ignore)] public long? Critical { get; set; }
        [J("warning", NullValueHandling = N.Ignore)] public long? Warning { get; set; }
    }

    public partial class OnlineCheck
    {
        [J("enabled", NullValueHandling = N.Ignore)] public bool? Enabled { get; set; }
        [J("host", NullValueHandling = N.Ignore)] public string Host { get; set; }
        [J("interval", NullValueHandling = N.Ignore)] public long? Interval { get; set; }
        [J("port", NullValueHandling = N.Ignore)] public long? Port { get; set; }
    }

    public partial class PluginBlacklist
    {
        [J("enabled", NullValueHandling = N.Ignore)] public bool? Enabled { get; set; }
        [J("ttl", NullValueHandling = N.Ignore)] public long? Ttl { get; set; }
        [J("url", NullValueHandling = N.Ignore)] public Uri Url { get; set; }
    }

    public partial class SystemClass
    {
        [J("actions", NullValueHandling = N.Ignore)] public List<object> Actions { get; set; }
        [J("events")] public object Events { get; set; }
    }

    public partial class SettingsModelTemperature
    {
        [J("cutoff", NullValueHandling = N.Ignore)] public long? Cutoff { get; set; }
        [J("profiles", NullValueHandling = N.Ignore)] public List<TemperatureProfile> Profiles { get; set; }
        [J("sendAutomatically", NullValueHandling = N.Ignore)] public bool? SendAutomatically { get; set; }
        [J("sendAutomaticallyAfter", NullValueHandling = N.Ignore)] public long? SendAutomaticallyAfter { get; set; }
    }

    public partial class TemperatureProfile
    {
        [J("bed", NullValueHandling = N.Ignore)] public long? Bed { get; set; }
        [J("chamber")] public object Chamber { get; set; }
        [J("extruder", NullValueHandling = N.Ignore)] public long? Extruder { get; set; }
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
    }

    public partial class TerminalFilter
    {
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("regex", NullValueHandling = N.Ignore)] public string Regex { get; set; }
    }

    public partial class Webcam
    {
        [J("bitrate", NullValueHandling = N.Ignore)] public string Bitrate { get; set; }
        [J("ffmpegPath", NullValueHandling = N.Ignore)] public string FfmpegPath { get; set; }
        [J("ffmpegThreads", NullValueHandling = N.Ignore)] public long? FfmpegThreads { get; set; }
        [J("ffmpegVideoCodec", NullValueHandling = N.Ignore)] public string FfmpegVideoCodec { get; set; }
        [J("flipH", NullValueHandling = N.Ignore)] public bool? FlipH { get; set; }
        [J("flipV", NullValueHandling = N.Ignore)] public bool? FlipV { get; set; }
        [J("rotate90", NullValueHandling = N.Ignore)] public bool? Rotate90 { get; set; }
        [J("snapshotSslValidation", NullValueHandling = N.Ignore)] public bool? SnapshotSslValidation { get; set; }
        [J("snapshotTimeout", NullValueHandling = N.Ignore)] public long? SnapshotTimeout { get; set; }
        [J("snapshotUrl", NullValueHandling = N.Ignore)] public Uri SnapshotUrl { get; set; }
        [J("streamRatio", NullValueHandling = N.Ignore)] public string StreamRatio { get; set; }
        [J("streamTimeout", NullValueHandling = N.Ignore)] public long? StreamTimeout { get; set; }
        [J("streamUrl", NullValueHandling = N.Ignore)] public Uri StreamUrl { get; set; }
        [J("timelapseEnabled", NullValueHandling = N.Ignore)] public bool? TimelapseEnabled { get; set; }
        [J("watermark", NullValueHandling = N.Ignore)] public bool? Watermark { get; set; }
        [J("webcamEnabled", NullValueHandling = N.Ignore)] public bool? WebcamEnabled { get; set; }
    }

    public partial class PrinterProfilesModel
    {
        [J("profiles", NullValueHandling = N.Ignore)] public ProfilesUnion? Profiles { get; set; }
    }

    public partial class ProfilesProfile
    {
        [J("id", NullValueHandling = N.Ignore)] public string Id { get; set; }
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("color", NullValueHandling = N.Ignore)] public string Color { get; set; }
        [J("model", NullValueHandling = N.Ignore)] public string Model { get; set; }
        [J("default", NullValueHandling = N.Ignore)] public bool? Default { get; set; }
        [J("current", NullValueHandling = N.Ignore)] public bool? Current { get; set; }
        [J("resource", NullValueHandling = N.Ignore)] public Uri Resource { get; set; }
        [J("volume", NullValueHandling = N.Ignore)] public Volume Volume { get; set; }
        [J("heatedBed", NullValueHandling = N.Ignore)] public bool? HeatedBed { get; set; }
        [J("heatedChamber", NullValueHandling = N.Ignore)] public bool? HeatedChamber { get; set; }
        [J("axes", NullValueHandling = N.Ignore)] public Axes Axes { get; set; }
        [J("extruder", NullValueHandling = N.Ignore)] public ProfileExtruder Extruder { get; set; }
    }

    public partial class Axes
    {
        [J("x", NullValueHandling = N.Ignore)] public E X { get; set; }
        [J("y", NullValueHandling = N.Ignore)] public E Y { get; set; }
        [J("z", NullValueHandling = N.Ignore)] public E Z { get; set; }
        [J("e", NullValueHandling = N.Ignore)] public E E { get; set; }
    }

    public partial class E
    {
        [J("speed", NullValueHandling = N.Ignore)] public long? Speed { get; set; }
        [J("inverted", NullValueHandling = N.Ignore)] public bool? Inverted { get; set; }
    }

    public partial class ProfileExtruder
    {
        [J("count", NullValueHandling = N.Ignore)] public long? Count { get; set; }
        [J("offsets", NullValueHandling = N.Ignore)] public List<Offset> Offsets { get; set; }
    }

    public partial class Offset
    {
        [J("x", NullValueHandling = N.Ignore)] public long? X { get; set; }
        [J("y", NullValueHandling = N.Ignore)] public long? Y { get; set; }
    }

    public partial class Volume
    {
        [J("formFactor", NullValueHandling = N.Ignore)] public string FormFactor { get; set; }
        [J("origin", NullValueHandling = N.Ignore)] public string Origin { get; set; }
        [J("width", NullValueHandling = N.Ignore)] public long? Width { get; set; }
        [J("depth", NullValueHandling = N.Ignore)] public long? Depth { get; set; }
        [J("height", NullValueHandling = N.Ignore)] public long? Height { get; set; }
        [J("custom_box", NullValueHandling = N.Ignore)] public bool? CustomBox { get; set; }
    }

    public partial class ProfilesProfiles
    {
        [J("_default", NullValueHandling = N.Ignore)] public Default Default { get; set; }
    }

    public partial class Default
    {
        [J("axes", NullValueHandling = N.Ignore)] public Axes Axes { get; set; }
        [J("color", NullValueHandling = N.Ignore)] public string Color { get; set; }
        [J("current", NullValueHandling = N.Ignore)] public bool? Current { get; set; }
        [J("default", NullValueHandling = N.Ignore)] public bool? DefaultDefault { get; set; }
        [J("extruder", NullValueHandling = N.Ignore)] public DefaultExtruder Extruder { get; set; }
        [J("heatedBed", NullValueHandling = N.Ignore)] public bool? HeatedBed { get; set; }
        [J("heatedChamber", NullValueHandling = N.Ignore)] public bool? HeatedChamber { get; set; }
        [J("id", NullValueHandling = N.Ignore)] public string Id { get; set; }
        [J("model", NullValueHandling = N.Ignore)] public string Model { get; set; }
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("resource", NullValueHandling = N.Ignore)] public Uri Resource { get; set; }
        [J("volume", NullValueHandling = N.Ignore)] public Volume Volume { get; set; }
    }

    public partial class DefaultExtruder
    {
        [J("count", NullValueHandling = N.Ignore)] public long? Count { get; set; }
        [J("nozzleDiameter", NullValueHandling = N.Ignore)] public double? NozzleDiameter { get; set; }
        [J("offsets", NullValueHandling = N.Ignore)] public List<List<long>> Offsets { get; set; }
        [J("sharedNozzle", NullValueHandling = N.Ignore)] public bool? SharedNozzle { get; set; }
    }

    public partial class PrinterCustomCommandModel
    {
        [J("controls", NullValueHandling = N.Ignore)] public List<object> Controls { get; set; }
    }

    public partial class PrinterChamberModel
    {
        [J("chamber", NullValueHandling = N.Ignore)] public PrinterChamberModelChamber Chamber { get; set; }
        [J("history", NullValueHandling = N.Ignore)] public List<PrinterChamberModelHistory> History { get; set; }
    }

    public partial class PrinterChamberModelChamber
    {
        [J("actual", NullValueHandling = N.Ignore)] public double? Actual { get; set; }
        [J("target")] public long? Target { get; set; }
        [J("offset", NullValueHandling = N.Ignore)] public long? Offset { get; set; }
    }

    public partial class PrinterChamberModelHistory
    {
        [J("time", NullValueHandling = N.Ignore)] public long? Time { get; set; }
        [J("chamber", NullValueHandling = N.Ignore)] public HistoryChamber Chamber { get; set; }
    }

    public partial class HistoryChamber
    {
        [J("actual", NullValueHandling = N.Ignore)] public double? Actual { get; set; }
        [J("target")] public long? Target { get; set; }
    }

    public partial class PrinterBedModel
    {
        [J("bed", NullValueHandling = N.Ignore)] public PrinterChamberModelChamber Bed { get; set; }
        [J("history", NullValueHandling = N.Ignore)] public List<PrinterBedModelHistory> History { get; set; }
    }

    public partial class PrinterBedModelHistory
    {
        [J("time", NullValueHandling = N.Ignore)] public long? Time { get; set; }
        [J("bed", NullValueHandling = N.Ignore)] public HistoryChamber Bed { get; set; }
    }

    public partial class PrinterToolModel
    {
        [J("tool0", NullValueHandling = N.Ignore)] public PrinterChamberModelChamber Tool0 { get; set; }
        [J("tool1", NullValueHandling = N.Ignore)] public PrinterChamberModelChamber Tool1 { get; set; }
        [J("history", NullValueHandling = N.Ignore)] public List<PrinterToolModelHistory> History { get; set; }
    }

    public partial class PrinterToolModelHistory
    {
        [J("time", NullValueHandling = N.Ignore)] public long? Time { get; set; }
        [J("tool0", NullValueHandling = N.Ignore)] public HistoryChamber Tool0 { get; set; }
        [J("tool1", NullValueHandling = N.Ignore)] public HistoryChamber Tool1 { get; set; }
        [J("bed", NullValueHandling = N.Ignore)] public HistoryChamber Bed { get; set; }
    }

    public partial class PrinterModel
    {
        [J("temperature", NullValueHandling = N.Ignore)] public PrinterModelTemperature Temperature { get; set; }
        [J("sd", NullValueHandling = N.Ignore)] public PrinterSdModel Sd { get; set; }
        [J("state", NullValueHandling = N.Ignore)] public State State { get; set; }
    }

    public partial class PrinterSdModel
    {
        [J("ready", NullValueHandling = N.Ignore)] public bool? Ready { get; set; }
    }

    public partial class State
    {
        [J("text", NullValueHandling = N.Ignore)] public string Text { get; set; }
        [J("flags", NullValueHandling = N.Ignore)] public Flags Flags { get; set; }
    }

    public partial class Flags
    {
        [J("operational", NullValueHandling = N.Ignore)] public bool? Operational { get; set; }
        [J("paused", NullValueHandling = N.Ignore)] public bool? Paused { get; set; }
        [J("printing", NullValueHandling = N.Ignore)] public bool? Printing { get; set; }
        [J("cancelling", NullValueHandling = N.Ignore)] public bool? Cancelling { get; set; }
        [J("pausing", NullValueHandling = N.Ignore)] public bool? Pausing { get; set; }
        [J("sdReady", NullValueHandling = N.Ignore)] public bool? SdReady { get; set; }
        [J("error", NullValueHandling = N.Ignore)] public bool? Error { get; set; }
        [J("ready", NullValueHandling = N.Ignore)] public bool? Ready { get; set; }
        [J("closedOrError", NullValueHandling = N.Ignore)] public bool? ClosedOrError { get; set; }
    }

    public partial class PrinterModelTemperature
    {
        [J("tool0", NullValueHandling = N.Ignore)] public PrinterChamberModelChamber Tool0 { get; set; }
        [J("tool1", NullValueHandling = N.Ignore)] public PrinterChamberModelChamber Tool1 { get; set; }
        [J("bed", NullValueHandling = N.Ignore)] public PrinterChamberModelChamber Bed { get; set; }
        [J("history", NullValueHandling = N.Ignore)] public List<PrinterToolModelHistory> History { get; set; }
    }

    public partial class LanguagesModel
    {
        [J("language_packs", NullValueHandling = N.Ignore)] public LanguagePacks LanguagePacks { get; set; }
    }

    public partial class LanguagePacks
    {
        [J("_core", NullValueHandling = N.Ignore)] public CoreClass Core { get; set; }
        [J("some_plugin", NullValueHandling = N.Ignore)] public CoreClass SomePlugin { get; set; }
    }

    public partial class CoreClass
    {
        [J("identifier", NullValueHandling = N.Ignore)] public string Identifier { get; set; }
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("languages", NullValueHandling = N.Ignore)] public List<Language> Languages { get; set; }
        [J("display", NullValueHandling = N.Ignore)] public string Display { get; set; }
    }

    public partial class Language
    {
        [J("locale", NullValueHandling = N.Ignore)] public string Locale { get; set; }
        [J("locale_display", NullValueHandling = N.Ignore)] public string LocaleDisplay { get; set; }
        [J("locale_english", NullValueHandling = N.Ignore)] public string LocaleEnglish { get; set; }
        [J("last_update", NullValueHandling = N.Ignore)] public long? LastUpdate { get; set; }
        [J("author", NullValueHandling = N.Ignore)] public string Author { get; set; }
    }

    public partial class JobModel
    {
        [J("job", NullValueHandling = N.Ignore)] public Job Job { get; set; }
        [J("progress", NullValueHandling = N.Ignore)] public Progress Progress { get; set; }
        [J("state", NullValueHandling = N.Ignore)] public string State { get; set; }
    }

    public partial class Job
    {
        [J("file", NullValueHandling = N.Ignore)] public JobFile File { get; set; }
        [J("estimatedPrintTime", NullValueHandling = N.Ignore)] public long? EstimatedPrintTime { get; set; }
        [J("filament", NullValueHandling = N.Ignore)] public Filament Filament { get; set; }
    }

    public partial class Filament
    {
        [J("length", NullValueHandling = N.Ignore)] public long? Length { get; set; }
        [J("volume", NullValueHandling = N.Ignore)] public double? Volume { get; set; }
    }

    public partial class JobFile
    {
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("origin", NullValueHandling = N.Ignore)] public string Origin { get; set; }
        [J("size", NullValueHandling = N.Ignore)] public long? Size { get; set; }
        [J("date", NullValueHandling = N.Ignore)] public long? Date { get; set; }
    }

    public partial class Progress
    {
        [J("completion", NullValueHandling = N.Ignore)] public double? Completion { get; set; }
        [J("filepos", NullValueHandling = N.Ignore)] public long? Filepos { get; set; }
        [J("printTime", NullValueHandling = N.Ignore)] public long? PrintTime { get; set; }
        [J("printTimeLeft", NullValueHandling = N.Ignore)] public long? PrintTimeLeft { get; set; }
    }

    public partial class FilesModel
    {
        [J("files", NullValueHandling = N.Ignore)] public List<ChildElement> Files { get; set; }
        [J("free", NullValueHandling = N.Ignore)] public string Free { get; set; }
    }

    public partial class ChildElement
    {
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("path", NullValueHandling = N.Ignore)] public string Path { get; set; }
        [J("type", NullValueHandling = N.Ignore)] public string Type { get; set; }
        [J("typePath", NullValueHandling = N.Ignore)] public List<string> TypePath { get; set; }
        [J("hash", NullValueHandling = N.Ignore)] public string Hash { get; set; }
        [J("size", NullValueHandling = N.Ignore)] public long? Size { get; set; }
        [J("date", NullValueHandling = N.Ignore)] public long? Date { get; set; }
        [J("origin", NullValueHandling = N.Ignore)] public string Origin { get; set; }
        [J("refs", NullValueHandling = N.Ignore)] public Refs Refs { get; set; }
        [J("gcodeAnalysis", NullValueHandling = N.Ignore)] public FileGcodeAnalysis GcodeAnalysis { get; set; }
        [J("print", NullValueHandling = N.Ignore)] public Print Print { get; set; }
        [J("children", NullValueHandling = N.Ignore)] public List<ChildElement> Children { get; set; }
    }

    public partial class FileGcodeAnalysis
    {
        [J("estimatedPrintTime", NullValueHandling = N.Ignore)] public long? EstimatedPrintTime { get; set; }
        [J("filament", NullValueHandling = N.Ignore)] public Filament Filament { get; set; }
    }

    public partial class Print
    {
        [J("failure", NullValueHandling = N.Ignore)] public long? Failure { get; set; }
        [J("success", NullValueHandling = N.Ignore)] public long? Success { get; set; }
        [J("last", NullValueHandling = N.Ignore)] public Last Last { get; set; }
    }

    public partial class Last
    {
        [J("date", NullValueHandling = N.Ignore)] public long? Date { get; set; }
        [J("success", NullValueHandling = N.Ignore)] public bool? Success { get; set; }
    }

    public partial class Refs
    {
        [J("resource", NullValueHandling = N.Ignore)] public Uri Resource { get; set; }
        [J("download", NullValueHandling = N.Ignore)] public Uri Download { get; set; }
    }

    public partial class ConnectionModel
    {
        [J("current", NullValueHandling = N.Ignore)] public Current Current { get; set; }
        [J("options", NullValueHandling = N.Ignore)] public Options Options { get; set; }
    }

    public partial class Current
    {
        [J("state", NullValueHandling = N.Ignore)] public string State { get; set; }
        [J("port", NullValueHandling = N.Ignore)] public string Port { get; set; }
        [J("baudrate", NullValueHandling = N.Ignore)] public long? Baudrate { get; set; }
        [J("printerProfile", NullValueHandling = N.Ignore)] public string PrinterProfile { get; set; }
    }

    public partial class Options
    {
        [J("ports", NullValueHandling = N.Ignore)] public List<string> Ports { get; set; }
        [J("baudrates", NullValueHandling = N.Ignore)] public List<long> Baudrates { get; set; }
        [J("printerProfiles", NullValueHandling = N.Ignore)] public List<PrinterProfile> PrinterProfiles { get; set; }
        [J("portPreference", NullValueHandling = N.Ignore)] public string PortPreference { get; set; }
        [J("baudratePreference", NullValueHandling = N.Ignore)] public long? BaudratePreference { get; set; }
        [J("printerProfilePreference", NullValueHandling = N.Ignore)] public string PrinterProfilePreference { get; set; }
        [J("autoconnect", NullValueHandling = N.Ignore)] public bool? Autoconnect { get; set; }
    }

    public partial class PrinterProfile
    {
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("id", NullValueHandling = N.Ignore)] public string Id { get; set; }
    }

    public partial class VersionModel
    {
        [J("api", NullValueHandling = N.Ignore)] public string Api { get; set; }
        [J("server", NullValueHandling = N.Ignore)] public string Server { get; set; }
        [J("text", NullValueHandling = N.Ignore)] public string Text { get; set; }
    }

    public partial class CurrentUserModel
    {
        [J("groups", NullValueHandling = N.Ignore)] public List<KeyElement> Groups { get; set; }
        [J("name", NullValueHandling = N.Ignore)] public string Name { get; set; }
        [J("permissions", NullValueHandling = N.Ignore)] public List<string> Permissions { get; set; }
    }

    public enum KeyElement { Admins, Guests, Readonly, Users };

    public partial struct ProfilesUnion
    {
        public List<ProfilesProfile> ProfilesProfileArray;
        public ProfilesProfiles ProfilesProfiles;

        public static implicit operator ProfilesUnion(List<ProfilesProfile> ProfilesProfileArray) => new ProfilesUnion { ProfilesProfileArray = ProfilesProfileArray };
        public static implicit operator ProfilesUnion(ProfilesProfiles ProfilesProfiles) => new ProfilesUnion { ProfilesProfiles = ProfilesProfiles };
    }

    public partial class UsersModel
    {
        public static UsersModel FromJson(string json) => JsonConvert.DeserializeObject<UsersModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class UserModel
    {
        public static UserModel FromJson(string json) => JsonConvert.DeserializeObject<UserModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class UserSettingsModel
    {
        public static UserSettingsModel FromJson(string json) => JsonConvert.DeserializeObject<UserSettingsModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class AccessGroupsModel
    {
        public static AccessGroupsModel FromJson(string json) => JsonConvert.DeserializeObject<AccessGroupsModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class AccessGroupModel
    {
        public static AccessGroupModel FromJson(string json) => JsonConvert.DeserializeObject<AccessGroupModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class PermissionsModel
    {
        public static PermissionsModel FromJson(string json) => JsonConvert.DeserializeObject<PermissionsModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class TimelapseModel
    {
        public static TimelapseModel FromJson(string json) => JsonConvert.DeserializeObject<TimelapseModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class SystemCommandsModel
    {
        public static SystemCommandsModel FromJson(string json) => JsonConvert.DeserializeObject<SystemCommandsModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class SlicingModel
    {
        public static SlicingModel FromJson(string json) => JsonConvert.DeserializeObject<SlicingModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class SettingsTemplatesModel
    {
        public static SettingsTemplatesModel FromJson(string json) => JsonConvert.DeserializeObject<SettingsTemplatesModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class SettingsModel
    {
        public static SettingsModel FromJson(string json) => JsonConvert.DeserializeObject<SettingsModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class PrinterProfilesModel
    {
        public static PrinterProfilesModel FromJson(string json) => JsonConvert.DeserializeObject<PrinterProfilesModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class PrinterCustomCommandModel
    {
        public static PrinterCustomCommandModel FromJson(string json) => JsonConvert.DeserializeObject<PrinterCustomCommandModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class PrinterSdModel
    {
        public static PrinterSdModel FromJson(string json) => JsonConvert.DeserializeObject<PrinterSdModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class PrinterChamberModel
    {
        public static PrinterChamberModel FromJson(string json) => JsonConvert.DeserializeObject<PrinterChamberModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class PrinterBedModel
    {
        public static PrinterBedModel FromJson(string json) => JsonConvert.DeserializeObject<PrinterBedModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class PrinterToolModel
    {
        public static PrinterToolModel FromJson(string json) => JsonConvert.DeserializeObject<PrinterToolModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class PrinterModel
    {
        public static PrinterModel FromJson(string json) => JsonConvert.DeserializeObject<PrinterModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class LanguagesModel
    {
        public static LanguagesModel FromJson(string json) => JsonConvert.DeserializeObject<LanguagesModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class JobModel
    {
        public static JobModel FromJson(string json) => JsonConvert.DeserializeObject<JobModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class FilesModel
    {
        public static FilesModel FromJson(string json) => JsonConvert.DeserializeObject<FilesModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class ConnectionModel
    {
        public static ConnectionModel FromJson(string json) => JsonConvert.DeserializeObject<ConnectionModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class VersionModel
    {
        public static VersionModel FromJson(string json) => JsonConvert.DeserializeObject<VersionModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public partial class CurrentUserModel
    {
        public static CurrentUserModel FromJson(string json) => JsonConvert.DeserializeObject<CurrentUserModel>(json, OctoPrint.API.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this UsersModel self) => JsonConvert.SerializeObject(self, OctoPrint.API.Models.Converter.Settings);
        public static string ToJson(this AccessGroupsModel self) => JsonConvert.SerializeObject(self, OctoPrint.API.Models.Converter.Settings);
        public static string ToJson(this PermissionsModel self) => JsonConvert.SerializeObject(self, OctoPrint.API.Models.Converter.Settings);
        public static string ToJson(this TimelapseModel self) => JsonConvert.SerializeObject(self, OctoPrint.API.Models.Converter.Settings);
        public static string ToJson(this SystemCommandsModel self) => JsonConvert.SerializeObject(self, OctoPrint.API.Models.Converter.Settings);
        public static string ToJson(this SlicingModel self) => JsonConvert.SerializeObject(self, OctoPrint.API.Models.Converter.Settings);
        public static string ToJson(this SettingsTemplatesModel self) => JsonConvert.SerializeObject(self, OctoPrint.API.Models.Converter.Settings);
        public static string ToJson(this SettingsModel self) => JsonConvert.SerializeObject(self, OctoPrint.API.Models.Converter.Settings);
        public static string ToJson(this PrinterProfilesModel self) => JsonConvert.SerializeObject(self, OctoPrint.API.Models.Converter.Settings);
        public static string ToJson(this PrinterCustomCommandModel self) => JsonConvert.SerializeObject(self, OctoPrint.API.Models.Converter.Settings);
        public static string ToJson(this PrinterSdModel self) => JsonConvert.SerializeObject(self, OctoPrint.API.Models.Converter.Settings);
        public static string ToJson(this PrinterChamberModel self) => JsonConvert.SerializeObject(self, OctoPrint.API.Models.Converter.Settings);
        public static string ToJson(this PrinterBedModel self) => JsonConvert.SerializeObject(self, OctoPrint.API.Models.Converter.Settings);
        public static string ToJson(this PrinterToolModel self) => JsonConvert.SerializeObject(self, OctoPrint.API.Models.Converter.Settings);
        public static string ToJson(this PrinterModel self) => JsonConvert.SerializeObject(self, OctoPrint.API.Models.Converter.Settings);
        public static string ToJson(this LanguagesModel self) => JsonConvert.SerializeObject(self, OctoPrint.API.Models.Converter.Settings);
        public static string ToJson(this JobModel self) => JsonConvert.SerializeObject(self, OctoPrint.API.Models.Converter.Settings);
        public static string ToJson(this FilesModel self) => JsonConvert.SerializeObject(self, OctoPrint.API.Models.Converter.Settings);
        public static string ToJson(this ConnectionModel self) => JsonConvert.SerializeObject(self, OctoPrint.API.Models.Converter.Settings);
        public static string ToJson(this VersionModel self) => JsonConvert.SerializeObject(self, OctoPrint.API.Models.Converter.Settings);
        public static string ToJson(this CurrentUserModel self) => JsonConvert.SerializeObject(self, OctoPrint.API.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                KeyElementConverter.Singleton,
                ProfilesUnionConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class KeyElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(KeyElement) || t == typeof(KeyElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "admins":
                    return KeyElement.Admins;
                case "guests":
                    return KeyElement.Guests;
                case "readonly":
                    return KeyElement.Readonly;
                case "users":
                    return KeyElement.Users;
            }
            throw new Exception("Cannot unmarshal type KeyElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (KeyElement)untypedValue;
            switch (value)
            {
                case KeyElement.Admins:
                    serializer.Serialize(writer, "admins");
                    return;
                case KeyElement.Guests:
                    serializer.Serialize(writer, "guests");
                    return;
                case KeyElement.Readonly:
                    serializer.Serialize(writer, "readonly");
                    return;
                case KeyElement.Users:
                    serializer.Serialize(writer, "users");
                    return;
            }
            throw new Exception("Cannot marshal type KeyElement");
        }

        public static readonly KeyElementConverter Singleton = new KeyElementConverter();
    }

    internal class ProfilesUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ProfilesUnion) || t == typeof(ProfilesUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<ProfilesProfiles>(reader);
                    return new ProfilesUnion { ProfilesProfiles = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<ProfilesProfile>>(reader);
                    return new ProfilesUnion { ProfilesProfileArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type ProfilesUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ProfilesUnion)untypedValue;
            if (value.ProfilesProfileArray != null)
            {
                serializer.Serialize(writer, value.ProfilesProfileArray);
                return;
            }
            if (value.ProfilesProfiles != null)
            {
                serializer.Serialize(writer, value.ProfilesProfiles);
                return;
            }
            throw new Exception("Cannot marshal type ProfilesUnion");
        }

        public static readonly ProfilesUnionConverter Singleton = new ProfilesUnionConverter();
    }
}
